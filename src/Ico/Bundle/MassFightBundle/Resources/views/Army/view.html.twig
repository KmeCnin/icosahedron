{% extends "IcoMassFightBundle::layout.html.twig" %}

{% block title %}
{{ parent() }}
{% if is_granted('EDIT', army) %}
<div class="pull-right btn-title">
    <a href="{{ path('ico_mass_fight_army_edit', {'id': army.id, 'slug': army.slug}) }}" class="btn btn-default"><span class="fa fa-pencil"></span> Modifier les stats de base</a>
</div>
{% endif %}
{% endblock %}

{% block content %}
    <div class="row">
        <div class="form-group form-inline col-md-12" style="margin:0;">
            <table style="width:100%;">
                <tr>
                    <td>
                        <div class="input-group" style="margin: 15px 0;">
                            <span class="input-group-addon" style="width: auto;">PV</span>
                            <input 
                                id="currentHP" 
                                type="number" 
                                class="form-control" 
                                style="width:60px"
                                onChange="updateHpBar();"
                                min="0"
                                value="{{ army.combatStats.hp }}"
                            />
                            <span class="input-group-addon" style="width: auto;">/ <span id="maxHP"></span></span>
                        </div>
                    </td>
                    <td>
                        <ul class="nav nav-pills pull-right">
                            <li class="active"><a class="nolink">FPA <span class="badge badge-success" id="total-fpa">{{ army.fpaValue }}</span></a></li>
                        </ul>
                    </td>
                </tr>
            </table>
        </div>
        <div class="col-xs-12">
            <div class="progress">
                <div id="hp-bar" class="progress-bar progress-bar-success"></div>
            </div>
        </div>
        <div class="col-xs-12 col-sm-6">
            <ul class="list-group">
                <li class="list-group-item" data-toggle="popover" title="Modificateur d'attaque" data-content="" data-container="body">
                    Modificateur d'attaque
                    <span id="total-MA" class="badge badge-xl badge-success"></span>
                </li>
                <li class="list-group-item" data-toggle="popover" title="Modificateur de dégâts" data-content="" data-container="body">
                    Modificateur de dégâts
                    <span id="total-damages" class="badge badge-xl badge-success"></span>
                </li>
                <li class="list-group-item" data-toggle="popover" title="Valeur de défense" data-content="" data-container="body">
                    Valeur de défense
                    <span id="total-VD" class="badge badge-xl badge-success"></span>
                </li>
            </ul>
        </div>
        <div class="col-xs-12 col-sm-6">
            <ul class="list-group">
                <li class="list-group-item" data-toggle="popover" title="Moral" data-content="" data-container="body">
                    Moral
                    <span id="total-Moral" class="badge badge-xl badge-success"></span>
                </li>
                <li class="list-group-item" data-toggle="popover" title="Vitesse" data-content="" data-container="body">
                    Vitesse
                    <span id="total-Speed" class="badge badge-xl badge-success"></span>
                </li>
                <li class="list-group-item" data-toggle="popover" title="Consommation" data-content="" data-container="body">
                    Consommation 
                    <span id="total-Conso" class="badge badge-xl badge-success"></span>
                </li>
            </ul>
        </div>
        <div class="col-xs-12 col-sm-6">
            <label for="strategy">Stratégie</label>
            <select id="strategy" class="form-control">
                <option value="-4" {% if army.combatStats.strategy == '-4' %}selected{% endif %}>Défensive (+4 VDéf/-4 MA)</option>
                <option value="-2" {% if army.combatStats.strategy == '-2' %}selected{% endif %}>Prudente (+2 VDéf/-2 MA)</option>
                <option value="0" {% if army.combatStats.strategy == '0' %}selected{% endif %}>Standard</option>
                <option value="2" {% if army.combatStats.strategy == '2' %}selected{% endif %}>Agressive (-2 VDéf/+2 MA)</option>
                <option value="4" {% if army.combatStats.strategy == '4' %}selected{% endif %}>Téméraire (-4 VDéf/+4 MA)</option>
            </select>
        </div>
        <div class="col-xs-12 col-sm-6">
            <label for="tactic">Tactique</label>
            <select id="tactic" class="form-control">
                {% for tactic in army.tactics %}
                    <option value="{{ tactic.id }}" {% if army.combatStats.tactic == tactic.id %}selected{% endif %}>{{ tactic }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="col-xs-12">
            <p id="tactic-description" class="help"></p>
        </div>
        <div class="col-xs-12">
            <label>Bonus</label>
            <table class="table table-striped" style="margin-bottom:20px;">
                <thead>
                    <tr>
                        <th>Nom</th>
                        <th>Attribut</th>
                        <th>Modificateur</th>
                        <th>Description</th>
                        <th><button type="button" class="btn btn-default" onclick="addNewBonus();"><span class="fa fa-plus"></span></button></th>
                    </tr>
                </thead>
                <tbody id="bonuses">
                    {% if army.combatStats.bonuses is defined %}
                    {% for bonus in army.combatStats.bonuses %}
                        <tr class="bonus">
                            <td>
                                <input type="text" class="form-control" name="name" value="{{ bonus.name }}">
                            </td>
                            <td>
                                <select name="attribute" class="form-control" style="min-width:80px;">
                                    <option value="fpa"{% if bonus.attribute == 'fpa' %} selected{% endif %}>FPA</option>
                                    <option value="ma"{% if bonus.attribute == 'ma' %} selected{% endif %}>MA</option>
                                    <option value="damages"{% if bonus.attribute == 'damages' %} selected{% endif %}>Dégâts</option>
                                    <option value="vd"{% if bonus.attribute == 'vd' %} selected{% endif %}>VDéf</option>
                                    <option value="moral"{% if bonus.attribute == 'moral' %} selected{% endif %}>Moral</option>
                                    <option value="speed"{% if bonus.attribute == 'speed' %} selected{% endif %}>Vitesse</option>
                                    <option value="conso"{% if bonus.attribute == 'conso' %} selected{% endif %}>Conso</option>
                                    <option value="prestige"{% if bonus.attribute == 'prestige' %} selected{% endif %}>Prestige</option>
                                </select>
                            </td>
                            <td>
                                <input name="mod" type="number" class="form-control" value="{{ bonus.mod }}">
                            </td>
                            <td>
                                <input name="desc" type="text" class="form-control" value="{{ bonus.desc }}">
                            </td>
                            <td>
                                <button type="button" class="btn btn-default" onclick="removeBonus(this);">
                                    <span class="fa fa-minus"></span>
                                </button>
                            </td>
                        </tr>
                    {% endfor %}
                {% endif %}
                </tbody>
            </table>
        </div>
        <div class="col-xs-12">
            <label>Commandant</label>
            <div class="well">
                <fieldset class="form-filters">
                    <legend>
                        {{ army.commander.name }}
                        <small class="text-muted">Prestige <span id="total-prestige"></span></small>
                        <input id="commanderInput" type="hidden" value="{{ army.combatStats.commander }}" />
                        <button
                                id="commanderOn"
                                type="button"
                                class="btn btn-primary"
                                {% if not army.combatStats.commander %}style="display:none"{% endif %}
                        ><span class="fa fa-check"></span> Présent dans l'armée</button>
                        <button
                                id="commanderOff"
                                type="button"
                                class="btn btn-warning"
                                {% if army.combatStats.commander %}style="display:none"{% endif %}
                        ><span class="fa fa-times"></span> Absent de l'armée</button>
                    </legend>
                    <div class="panel-body">
                        {% for benefit in army.commander.benefits %}
                            <div class="panel panel-default" data-benefit="{{ benefit.id }}">
                                <div class="panel-heading">
                                    {{ benefit.name }}
                                    <small class="mods text-muted"></small>
                                    <input id="benefitInput{{ benefit.id }}" type="hidden" class="benefitInput" />
                                    <button id="benefitOn{{ benefit.id }}" type="button" class="btn btn-primary benefitOn">
                                        <span class="fa fa-check"></span> Actif
                                    </button>
                                    <button id="benefitOff{{ benefit.id }}" type="button" class="btn btn-default benefitOff">
                                        <span class="fa fa-times"></span> Inactif
                                    </button>
                                </div>
                                <div class="panel-body">{{ benefit.description }}</div>
                            </div>
                        {% endfor %}
                    </div>
                </fieldset>
            </div>
        </div>
    </div>

    <style>
        [data-benefit] {
            cursor: pointer;
        }
        .text-muted > * {
            color: #999999 !important;
        }
    </style>
    
    <script>
        var mappedTactics = [];
        var mappedBenefits = [];
        var mappedBenefitsNames = [];
        var mappedBenefitsAlleles = [];
        var mappedModsAsString = [];
        var mappedBenefitsMods;

        {% autoescape false %}

        {% for tactic in army.tactics %}
        mappedTactics[{{ tactic.id }}] = {{ tactic.mappedMods|json_encode() }};
        {% endfor %}

        {% for benefit in army.commander.benefits %}
        mappedBenefits[{{ benefit.id }}] = {{ benefit.mappedMods|json_encode() }};
        mappedBenefitsNames[{{ benefit.id }}] = '{{ benefit.name }}';
        mappedModsAsString[{{ benefit.id }}] = '{{ benefit.modsAsString }}';
        {% endfor %}

        disableAllBenefits();
        {% if army.combatStats.commander %}
        {% for benefitId in army.combatStats.benefits %}
        enableBenefit({{ benefitId }});
        {% endfor %}
        {% endif %}

        {% for benefit in benefitsAlleles %}
        mappedBenefitsAlleles['{{ benefit.name }}'] = {
            'mods': {{ benefit.mappedMods|json_encode() }},
            'modsAsString': '{{ benefit.modsAsString }}',
            'prestige': {{ benefit.minPrestige }}
        };
        {% endfor %}

        {% endautoescape %}

        $(document).ready(function () {
            init();
        });

        function init()
        {
            initStrategy();
            initTactic();
            initCommander();
            updateTotals();
            initHP();
            updateHpBar();
            initBonuses();
        }

        function initCommander()
        {
            var input = $('#commanderInput');
            var buttonOn = $('#commanderOn');
            var buttonOff = $('#commanderOff');
            updateBenefitsMods();

            updateBenefits();
            $('[data-benefit]').click(function () {
                toggleBenefit($(this).attr('data-benefit'));
                updateBenefits();
            });

            buttonOn.click(function () {
                input.val(0);
                buttonOn.hide();
                buttonOff.show();
                disableAllBenefits();
                updateBenefits();
            });
            buttonOff.click(function () {
                input.val(1);
                buttonOff.hide();
                buttonOn.show();
                enableAllBenefits();
                updateBenefits();
            });
        }

        function enableAllBenefits()
        {
            $('[data-benefit]').each(function () {
                enableBenefit($(this).attr('data-benefit'));
            });
        }

        function disableAllBenefits()
        {
            $('[data-benefit]').each(function () {
                disableBenefit($(this).attr('data-benefit'));
            });
        }

        function enableBenefit(id)
        {
            $('[data-benefit='+id+']')
                .removeClass('text-muted')
                .find('.benefitOff').hide()
                .parent()
                .find('.benefitOn').show()
                .parent()
                .find('.benefitInput').val(1)
            ;
        }

        function disableBenefit(id)
        {
            $('[data-benefit='+id+']')
                .addClass('text-muted')
                .find('.benefitOn').hide()
                .parent()
                .find('.benefitOff').show()
                .parent()
                .find('.benefitInput').val(0)
            ;
        }

        function toggleBenefit(id)
        {
            var benefit = $('[data-benefit='+id+']');
            benefit.toggleClass('text-muted');
            benefit.find('.benefitOn').toggle();
            benefit.find('.benefitOff').toggle();
            benefit.find('.benefitInput').val(
                benefit.find('.benefitInput').val() == 1 ? 0 : 1
            );

            updateBenefits();
        }

        function updateBenefits()
        {
            mappedBenefitsMods = {
                'fp': 0,
                'ma': 0,
                'damages': 0,
                'vd': 0,
                'moral': 0,
                'speed': 0,
                'conso': 0
            };
            $('[data-benefit]').each(function () {
                if ($(this).find('.benefitInput').val() == 1) {
                    var id = $(this).attr('data-benefit');
                    var benefit = getAllele(id);
                    for (var mod in benefit) {
                        if (benefit.hasOwnProperty(mod)) {
                            mappedBenefitsMods[mod] += benefit[mod];
                        }
                    }
                }
            });
            updateTotals();
        }

        function updateBenefitsMods()
        {
            $('[data-benefit]').each(function () {
                $(this)
                    .find('.mods')
                    .html(getAlleleAsString($(this).attr('data-benefit')))
                ;
            });
        }

        function getAllele(id)
        {
            var benefit = mappedBenefits[id];
            var name = mappedBenefitsNames[id];
            var commanderPrestige = parseInt($('#total-prestige').html());
            if (typeof mappedBenefitsAlleles[name] !== 'undefined') {
                var allele = mappedBenefitsAlleles[name];
                if (commanderPrestige >= allele.prestige) {
                    benefit = allele.mods;
                }
            }
            return benefit;
        }

        function getAlleleAsString(id)
        {
            var benefit = mappedModsAsString[id];
            var name = mappedBenefitsNames[id];
            var commanderPrestige = parseInt($('#total-prestige').html());
            if (typeof mappedBenefitsAlleles[name] !== 'undefined') {
                var allele = mappedBenefitsAlleles[name];
                if (commanderPrestige >= allele.prestige) {
                    benefit = allele.modsAsString;
                }
            }
            return benefit;
        }

        function initHP()
        {
            var maxHp = $('#maxHP');
            maxHp.html({{ army.baseHP }});
        }

        function updateTotals()
        {
            updateTotalMA();
            updateTotalVD();
            updateTotalDamages();
            updateTotalMoral();
            updateTotalSpeed();
            updateTotalConso();
            updateTotalFpa();
            updateTotalPrestige();
            snapshotCombatStats();
        }

        function updateTotalMA() {
            var computation = [];

            var base = {{ army.baseMA }};
            var strategy = parseInt($('#strategy').val());
            var tactic = parseInt(mappedTactics[$('#tactic').val()]['ma']);
            var benefit = parseInt(mappedBenefitsMods['ma']);

            computation.push({
                'mod': base,
                'label': 'Base armée'
            });
            computation.push({
                'mod': strategy,
                'label': 'Stratégie'
            });
            computation.push({
                'mod': tactic,
                'label': 'Tactique'
            });
            computation.push({
                'mod': benefit,
                'label': 'Bienfaits'
            });

            var bonuses = 0;
            $('.bonus [name=attribute]').each(function () {
                if ($(this).val() == 'ma') {
                    var mod = parseInt($(this).closest('.bonus').find('[name=mod]').val());
                    var label = $(this).closest('.bonus').find('[name=name]').val();

                    bonuses += mod;
                    computation.push({
                        'mod': mod,
                        'label': label
                    });
                }
            });

            var computationString = getComputationString(computation, 'ma');

            $('#total-MA')
                .html(
                    base +
                    strategy +
                    tactic +
                    benefit +
                    bonuses
                )
                .parent('[data-toggle=popover]')
                .attr('data-content', computationString)
            ;
        }

        function updateTotalVD() {
            var computation = [];

            var base = {{ army.baseVD }};
            var strategy = parseInt($('#strategy').val()) * -1 ;
            var tactic = parseInt(mappedTactics[$('#tactic').val()]['vd']);
            var benefit = parseInt(mappedBenefitsMods['vd']);

            computation.push({
                'mod': base,
                'label': 'Base armée'
            });
            computation.push({
                'mod': strategy,
                'label': 'Stratégie'
            });
            computation.push({
                'mod': tactic,
                'label': 'Tactique'
            });
            computation.push({
                'mod': benefit,
                'label': 'Bienfaits'
            });

            var bonuses = 0;
            $('.bonus [name=attribute]').each(function () {
                if ($(this).val() == 'vd') {
                    var mod = parseInt($(this).closest('.bonus').find('[name=mod]').val());
                    var label = $(this).closest('.bonus').find('[name=name]').val();

                    bonuses += mod;
                    computation.push({
                        'mod': mod,
                        'label': label
                    });
                }
            });

            var computationString = getComputationString(computation, 'vd');

            $('#total-VD')
                .html(
                    base +
                    strategy +
                    tactic +
                    benefit +
                    bonuses
                )
                .parent('[data-toggle=popover]')
                .attr('data-content', computationString)
            ;
        }

        function updateTotalDamages() {
            var computation = [];

            var tactic = parseInt(mappedTactics[$('#tactic').val()]['damages']);
            var benefit = parseInt(mappedBenefitsMods['damages']);

            computation.push({
                'mod': tactic,
                'label': 'Tactique'
            });
            computation.push({
                'mod': benefit,
                'label': 'Bienfaits'
            });

            var bonuses = 0;
            $('.bonus [name=attribute]').each(function () {
                if ($(this).val() == 'damages') {
                    var mod = parseInt($(this).closest('.bonus').find('[name=mod]').val());
                    var label = $(this).closest('.bonus').find('[name=name]').val();

                    bonuses += mod;
                    computation.push({
                        'mod': mod,
                        'label': label
                    });
                }
            });

            var computationString = getComputationString(computation, 'damages');

            $('#total-damages')
                .html(
                    tactic +
                    benefit
                )
                .parent('[data-toggle=popover]')
                .attr('data-content', computationString)
            ;
        }

        function updateTotalMoral() {
            var computation = [];

            var tactic = parseInt(mappedTactics[$('#tactic').val()]['moral']);
            var commander = 0;
            if ($('#commanderInput').val() == 1) {
                commander = {{ army.commander.bonusMoral }};
            }
            var benefit = parseInt(mappedBenefitsMods['moral']);

            computation.push({
                'mod': tactic,
                'label': 'Tactique'
            });
            computation.push({
                'mod': commander,
                'label': 'Commandant'
            });
            computation.push({
                'mod': benefit,
                'label': 'Bienfaits'
            });

            var bonuses = 0;
            $('.bonus [name=attribute]').each(function () {
                if ($(this).val() == 'moral') {
                    var mod = parseInt($(this).closest('.bonus').find('[name=mod]').val());
                    var label = $(this).closest('.bonus').find('[name=name]').val();

                    bonuses += mod;
                    computation.push({
                        'mod': mod,
                        'label': label
                    });
                }
            });

            var moral = tactic + commander + benefit + bonuses;
//                if (moral < -4) {
//                    moral = -4;
//                }
//                if (moral > 4) {
//                    moral = 4;
//                }

            var computationString = getComputationString(computation, 'moral');

            $('#total-Moral')
                .html(moral)
                .parent('[data-toggle=popover]')
                .attr('data-content', computationString)
            ;
        }

        function updateTotalSpeed() {
            var computation = [];

            var base = {{ army.baseArmySpeed }};
            var tactic = parseInt(mappedTactics[$('#tactic').val()]['speed']);
            var benefit = parseInt(mappedBenefitsMods['speed']);

            computation.push({
                'mod': base,
                'label': 'Base armée'
            });
            computation.push({
                'mod': tactic,
                'label': 'Tactique'
            });
            computation.push({
                'mod': benefit,
                'label': 'Bienfaits'
            });

            var speed = base +
                tactic +
                benefit;

            var bonuses = 0;
            $('.bonus [name=attribute]').each(function () {
                if ($(this).val() == 'speed') {
                    var mod = parseInt($(this).closest('.bonus').find('[name=mod]').val());
                    var label = $(this).closest('.bonus').find('[name=name]').val();

                    bonuses += mod;
                    computation.push({
                        'mod': mod,
                        'label': label
                    });
                }
            });

            var computationString = getComputationString(computation, 'speed');

            // If "Se débrouiller sur place" benefit is active:
            if ($('#benefitInput10').val() == 1) {
                speed = Math.ceil(speed/2);
            }

            $('#total-Speed')
                .html(speed)
                .parent('[data-toggle=popover]')
                .attr('data-content', computationString)
            ;
        }

        function updateTotalConso() {
            var computation = [];

            var base = {{ army.basePC }};
            var tactic = parseInt(mappedTactics[$('#tactic').val()]['conso']);
            var benefit = parseInt(mappedBenefitsMods['conso']);

            computation.push({
                'mod': base,
                'label': 'Base armée'
            });
            computation.push({
                'mod': tactic,
                'label': 'Tactique'
            });
            computation.push({
                'mod': benefit,
                'label': 'Bienfaits'
            });

            var conso = base +
                tactic +
                benefit;

            var bonuses = 0;
            $('.bonus [name=attribute]').each(function () {
                if ($(this).val() == 'conso') {
                    var mod = parseInt($(this).closest('.bonus').find('[name=mod]').val());
                    var label = $(this).closest('.bonus').find('[name=name]').val();

                    bonuses += mod;
                    computation.push({
                        'mod': mod,
                        'label': label
                    });
                }
            });

            var computationString = getComputationString(computation, 'conso');

            // If "Se débrouiller sur place" benefit is active:
            if ($('#benefitInput10').val() == 1) {
                conso = Math.ceil(conso/2);
            }
            $('#total-Conso')
                .html(conso)
                .parent('[data-toggle=popover]')
                .attr('data-content', computationString)
            ;
        }

        function updateTotalFpa()
        {
            var bonus = 0;
            $('.bonus [name=attribute]').each(function () {
                if ($(this).val() == 'fpa') {
                    bonus += parseInt($(this).closest('.bonus').find('[name=mod]').val());
                }
            });

            $('#total-fpa').html({{ army.fpaValue }} + bonus);
        }

        function updateTotalPrestige()
        {
            var bonus = 0;
            $('.bonus [name=attribute]').each(function () {
                if ($(this).val() == 'prestige') {
                    bonus += parseInt($(this).closest('.bonus').find('[name=mod]').val());
                }
            });

            $('#total-prestige').html({{ army.commander.prestigeValue }} + bonus);
        }

        function initStrategy()
        {
            $('#strategy').change(function () {
                updateTotalMA();
                updateTotalVD();
                snapshotCombatStats();
            });
        }

        function initTactic()
        {
            var tacticsDesc = {};
            {% for tactic in army.tactics %}
            tacticsDesc[{{ tactic.id }}] = ('<strong>{{ tactic.name }} :</strong> {{ tactic.description }}');
            {% endfor %}
            var tactic = $('#tactic');
            $('#tactic-description').html(tacticsDesc[tactic.val()]);
            tactic.change(function () {
                $('#tactic-description').html(tacticsDesc[$('#tactic').val()]);
                updateTotals();
            });
        }

        function initBonuses()
        {
            var bonuses = $('.bonus');
            if (bonuses.length == 0) {
                addNewBonus();
                checkIsLastBonus();
            }
            $(document).on('change', '.bonus', function () {
                updateTotals();
                updateBenefitsMods();
            });
        }

        function addNewBonus()
        {
            var line = '<tr class="bonus"><td><input type="text" class="form-control" name="name"></td><td><select name="attribute" class="form-control" style="min-width:80px;"><option value="fpa">FPA</option><option value="ma">MA</option><option value="damages">Dégâts</option><option value="vd">VDéf</option><option value="moral">Moral</option><option value="speed">Vitesse</option><option value="conso">Conso</option><option value="prestige">Prestige</option></select></td><td><input name="mod" type="number" class="form-control"></td><td><input name="desc" type="text" class="form-control"></td><td><button type="button" class="btn btn-default" onclick="removeBonus(this);"><span class="fa fa-minus"></span></button></td></tr>';
            $('#bonuses').append(line);
            checkIsLastBonus();
        }

        function removeBonus(bonus)
        {
            $(bonus).closest('.bonus').remove();
            checkIsLastBonus();
        }

        function checkIsLastBonus()
        {
            var bonuses = $('.bonus');
            if (bonuses.length == 1) {
                $(bonuses).find('button').hide();
            } else {
                $(bonuses).find('button').show();
            }
            updateBenefits();
            updateBenefitsMods();
        }

        function updateHpBar()
        {
            var percentLife = $('#currentHP').val()/$('#maxHP').html()*100;
            var hpBar = $('#hp-bar');
            hpBar.css('width', percentLife+'%');
            if (percentLife < 10) {
                hpBar
                    .removeClass('progress-bar-success')
                    .removeClass('progress-bar-warning')
                    .addClass('progress-bar-danger');
            } else if (percentLife < 50) {
                hpBar
                    .removeClass('progress-bar-success')
                    .removeClass('progress-bar-danger')
                    .addClass('progress-bar-warning');
            } else {
                hpBar
                    .removeClass('progress-bar-danger')
                    .removeClass('progress-bar-warning')
                    .addClass('progress-bar-success');
            }
            snapshotCombatStats();
        }

        function snapshotCombatStats()
        {
            var benefits = [];
            $('[data-benefit]').each(function () {
                if ($(this).find('.benefitInput').val() == 1) {
                    benefits.push(parseInt($(this).attr('data-benefit')));
                }
            });

            var bonuses = [];
            $('.bonus').each(function () {
                if ($(this).find('[name=mod]').val() != 0 &&
                    $(this).find('[name=mod]').val() != ''
                ) {
                    bonuses.push({
                        'name': $(this).find('[name=name]').val(),
                        'attribute': $(this).find('[name=attribute]').val(),
                        'mod': $(this).find('[name=mod]').val(),
                        'desc': $(this).find('[name=desc]').val()
                    });
                }
            });

            $.post(
                Routing.generate('ico_mass_fight_army_combat_stats_push'),
                {
                    'armyId': {{ army.id }},
                    'combatStats': {
                        'hp': $('#currentHP').val(),
                        'strategy': $('#strategy').val(),
                        'tactic': $('#tactic').val(),
                        'commander': $('#commanderInput').val(),
                        'benefits': benefits,
                        'bonuses': bonuses
                    }
                }
            );
        }

        function getComputationString(computation, $type)
        {
            var empty = true;
            var computationString = '<table style="width:100%">';
            computation.forEach(function (step) {
                if (step.mod != 0) {
                    empty = false;
                    var mod = castIntToString(step.mod);
                    if (step.label == 'Base armée') {
                        mod = mod.slice(1);
                    }
                    computationString += '<tr>';
                    computationString += '<td>'+step.label+'</td>';
                    computationString += '<td class="text-right" style="padding-left:5px"> '+mod+'</td>';
                    computationString += '</tr>';
                }
            });

            if ($('#benefitInput10').val() == 1 && ($type == 'speed' || $type == 'conso')) {
                empty = false;
                computationString += '<tr>';
                computationString += '<td>Se débrouiller sur place</td>';
                computationString += '<td class="text-right" style="padding-left:5px"> / 2</td>';
                computationString += '</tr>';
            }

            computationString += '</table>';

            if (empty) {
                computationString = 'Aucun bonus';
            }

            return computationString;
        }

        function castIntToString($int)
        {
            if ($int >= 0) {
                return '+ '+$int;
            } else {
                return '- '+Math.abs($int);
            }
        }
    </script>
{% endblock %}