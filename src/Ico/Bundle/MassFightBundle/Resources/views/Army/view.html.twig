{% extends "IcoMassFightBundle::layout.html.twig" %}

{% block title %}
{{ parent() }}
{% if is_granted('EDIT', army) %}
<div class="pull-right btn-title">
    <a href="{{ path('ico_mass_fight_army_edit', {'id': army.id, 'slug': army.slug}) }}" class="btn btn-default"><span class="fa fa-pencil"></span> Modifier les stats de base</a>
</div>
{% endif %}
{% endblock %}

{% block content %}
    <div class="row">
        <div class="form-group form-inline col-md-12" style="margin:0;">
            <table style="width:100%;">
                <tr>
                    <td>
                        <div class="input-group" style="margin: 15px 0;">
                            <span class="input-group-addon" style="width: auto;">PV</span>
                            <input 
                                id="currentHP" 
                                type="number" 
                                class="form-control" 
                                style="width:60px"
                                onChange="updateHpBar();"
                                min="0"
                                value="{{ army.combatStats.hp }}"
                            />
                            <span class="input-group-addon" style="width: auto;">/ <span id="maxHP"></span></span>
                        </div>
                    </td>
                    <td>
                        <ul class="nav nav-pills pull-right">
                            <li class="active"><a class="nolink">FP <span class="badge badge-success">2</span></a></li>
                        </ul>
                    </td>
                </tr>
            </table>
        </div>
        <div class="col-xs-12">
            <div class="progress">
                <div id="hp-bar" class="progress-bar progress-bar-success"></div>
            </div>
        </div>
        <div class="col-xs-12 col-sm-6">
            <ul class="list-group">
                <li class="list-group-item">
                    Modificateur d'attaque
                    <span id="total-MA" class="badge badge-xl badge-success"></span>
                </li>
                <li class="list-group-item">
                    Modificateur de dégâts
                    <span id="total-damages" class="badge badge-xl badge-success"></span>
                </li>
                <li class="list-group-item">
                    Valeur de défense
                    <span id="total-VD" class="badge badge-xl badge-success"></span>
                </li>
            </ul>
        </div>
        <div class="col-xs-12 col-sm-6">
            <ul class="list-group">
                <li class="list-group-item">
                    Moral
                    <span id="total-Moral" class="badge badge-xl badge-success"></span>
                </li>
                <li class="list-group-item">
                    Vitesse
                    <span id="total-Speed" class="badge badge-xl badge-success"></span>
                </li>
                <li class="list-group-item">
                    Consommation 
                    <span id="total-Conso" class="badge badge-xl badge-success"></span>
                </li>
            </ul>
        </div>
        <div class="col-xs-12 col-sm-6">
            <label for="strategy">Stratégie</label>
            <select id="strategy" class="form-control">
                <option value="-4" {% if army.combatStats.strategy == '-4' %}selected{% endif %}>Défensive (+4 VDéf/-4 MA)</option>
                <option value="-2" {% if army.combatStats.strategy == '-2' %}selected{% endif %}>Prudente (+2 VDéf/-2 MA)</option>
                <option value="0" {% if army.combatStats.strategy == '0' %}selected{% endif %}>Standard</option>
                <option value="2" {% if army.combatStats.strategy == '2' %}selected{% endif %}>Agressive (-2 VDéf/+2 MA)</option>
                <option value="4" {% if army.combatStats.strategy == '4' %}selected{% endif %}>Téméraire (-4 VDéf/+4 MA)</option>
            </select>
        </div>
        <div class="col-xs-12 col-sm-6">
            <label for="tactic">Tactique</label>
            <select id="tactic" class="form-control">
                {% for tactic in army.tactics %}
                    <option value="{{ tactic.id }}" {% if army.combatStats.tactic == tactic.id %}selected{% endif %}>{{ tactic }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="col-xs-12">
            <p id="tactic-description" class="help"></p>
        </div>
        <div class="col-xs-12">
            <label>Bonus</label>
            <table>
                <thead>
                    <tr>
                        <th>Bonus</th>
                        <th>FP</th>
                        <th>MA</th>
                        <th>Dégâts</th>
                        <th>VDéf</th>
                        <th>Moral</th>
                        <th>Vitesse</th>
                        <th>Conso</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
        <div class="col-xs-12">
            <label>Commandant</label>
            <div class="well">
                <fieldset class="form-filters">
                    <legend>
                        {{ army.commander.name }}
                        <small class="text-muted">Prestige <span id="prestige"></span></small>
                        <input id="commanderInput" type="hidden" checked="checked" />
                        <button
                                id="commanderOn"
                                type="button"
                                class="btn btn-primary"
                        ><span class="fa fa-check"></span> Présent dans l'armée</button>
                        <button
                                id="commanderOff"
                                type="button"
                                class="btn btn-warning"
                                style="display:none;"
                        ><span class="fa fa-times"></span> Absent de l'armée</button>
                    </legend>
                    <div class="panel-body">
                        {% for benefit in army.commander.benefits %}
                            <div class="panel panel-default" data-benefit="{{ benefit.id }}">
                                <div class="panel-heading">
                                    {{ benefit.name }}
                                    <small class="mods text-muted"></small>
                                    <input id="benefitInput{{ benefit.id }}" type="hidden" value="true" class="benefitInput" />
                                    <button id="benefitOn{{ benefit.id }}" type="button" class="btn btn-primary benefitOn">
                                        <span class="fa fa-check"></span> Actif
                                    </button>
                                    <button id="benefitOff{{ benefit.id }}" type="button" class="btn btn-default benefitOff">
                                        <span class="fa fa-times"></span> Inactif
                                    </button>
                                </div>
                                <div class="panel-body">{{ benefit.description }}</div>
                            </div>
                        {% endfor %}
                    </div>
                </fieldset>
            </div>
        </div>
    </div>

    <style>
        [data-benefit] {
            cursor: pointer;
        }
        .text-muted > * {
            color: #999999 !important;
        }
    </style>
    
    <script>
        $(document).ready(function () {
            var mappedTactics = [];
            var mappedBenefits = [];
            var mappedBenefitsNames = [];
            var mappedBenefitsAlleles = [];
            var mappedModsAsString = [];
            var mappedBenefitsMods;
            var commanderPrestige = parseInt({{ army.commander.prestigeValue }});
            {% autoescape false %}

            {% for tactic in army.tactics %}
            mappedTactics[{{ tactic.id }}] = {{ tactic.mappedMods|json_encode() }};
            {% endfor %}

            {% for benefit in army.commander.benefits %}
            mappedBenefits[{{ benefit.id }}] = {{ benefit.mappedMods|json_encode() }};
            mappedBenefitsNames[{{ benefit.id }}] = '{{ benefit.name }}';
            mappedModsAsString[{{ benefit.id }}] = '{{ benefit.modsAsString }}';
            {% endfor %}

            disableAllBenefits();
            {% for benefitId in army.combatStats.benefits %}
            enableBenefit({{ benefitId }});
            {% endfor %}

            {% for benefit in benefitsAlleles %}
            mappedBenefitsAlleles['{{ benefit.name }}'] = {
                'mods': {{ benefit.mappedMods|json_encode() }},
                'modsAsString': '{{ benefit.modsAsString }}',
                'prestige': {{ benefit.minPrestige }}
            };
            {% endfor %}

            {% endautoescape %}
            
            init();
        
            function init()
            {
                initStrategy();
                initTactic();
                initCommander();
                updateTotals();
                initHP();
                updateHpBar();
            }

            function initCommander()
            {
                var input = $('#commanderInput');
                var buttonOn = $('#commanderOn');
                var buttonOff = $('#commanderOff');
                $('#prestige').html(commanderPrestige);
                updateBenefitsMods();

                updateBenefits();
                $('[data-benefit]').click(function () {
                    toggleBenefit($(this).attr('data-benefit'));
                    updateBenefits();
                });

                buttonOn.click(function () {
                    input.prop('checked', false);
                    buttonOn.hide();
                    buttonOff.show();
                    disableAllBenefits();
                    updateBenefits();
                });
                buttonOff.click(function () {
                    input.prop('checked', true);
                    buttonOff.hide();
                    buttonOn.show();
                    enableAllBenefits();
                    updateBenefits();
                });
            }

            function enableAllBenefits()
            {
                $('[data-benefit]').each(function () {
                    enableBenefit($(this).attr('data-benefit'));
                });
            }

            function disableAllBenefits()
            {
                $('[data-benefit]').each(function () {
                    disableBenefit($(this).attr('data-benefit'));
                });
            }

            function enableBenefit(id)
            {
                $('[data-benefit='+id+']')
                    .removeClass('text-muted')
                    .find('.benefitOff').hide()
                    .parent()
                    .find('.benefitOn').show()
                    .parent()
                    .find('.benefitInput').val(1)
                ;
                snapshotCombatStats();
            }

            function disableBenefit(id)
            {
                $('[data-benefit='+id+']')
                    .addClass('text-muted')
                    .find('.benefitOn').hide()
                    .parent()
                    .find('.benefitOff').show()
                    .parent()
                    .find('.benefitInput').val(0)
                ;
            }

            function toggleBenefit(id)
            {
                var benefit = $('[data-benefit='+id+']');
                benefit.toggleClass('text-muted');
                benefit.find('.benefitOn').toggle();
                benefit.find('.benefitOff').toggle();
                benefit.find('.benefitInput').val(
                    benefit.find('.benefitInput').val() == 1 ? 0 : 1
                );
                updateBenefits();
            }

            function updateBenefits()
            {
                mappedBenefitsMods = {
                    'fp': 0,
                    'ma': 0,
                    'damages': 0,
                    'vd': 0,
                    'moral': 0,
                    'speed': 0,
                    'conso': 0
                };
                $('[data-benefit]').each(function () {
                    if ($(this).find('.benefitInput').val() == 1) {
                        var id = $(this).attr('data-benefit');
                        var benefit = getAllele(id);
                        for (var mod in benefit) {
                            if (benefit.hasOwnProperty(mod)) {
                                mappedBenefitsMods[mod] += benefit[mod];
                            }
                        }
                    }
                });
                updateTotals();
            }

            function updateBenefitsMods()
            {
                $('[data-benefit]').each(function () {
                    $(this)
                        .find('.mods')
                        .html(getAlleleAsString($(this).attr('data-benefit')))
                    ;
                });
            }

            function getAllele(id)
            {
                var benefit = mappedBenefits[id];
                var name = mappedBenefitsNames[id];
                if (typeof mappedBenefitsAlleles[name] !== 'undefined') {
                    var allele = mappedBenefitsAlleles[name];
                    if (commanderPrestige >= allele.prestige) {
                        benefit = allele.mods;
                    }
                }
                return benefit;
            }

            function getAlleleAsString(id)
            {
                var benefit = mappedModsAsString[id];
                var name = mappedBenefitsNames[id];
                if (typeof mappedBenefitsAlleles[name] !== 'undefined') {
                    var allele = mappedBenefitsAlleles[name];
                    if (commanderPrestige >= allele.prestige) {
                        benefit = allele.modsAsString;
                    }
                }
                return benefit;
            }

            function initHP()
            {
                var maxHp = $('#maxHP');
                maxHp.html({{ army.baseHP }});
            }

            function updateTotals()
            {
                updateTotalMA();
                updateTotalVD();
                updateTotalDamages();
                updateTotalMoral();
                updateTotalSpeed();
                updateTotalConso();
                snapshotCombatStats();
            }

            function updateTotalMA() {
                $('#total-MA').html(
                    {{ army.baseMA }} + 
                    parseInt($('#strategy').val()) +
                    parseInt(mappedTactics[$('#tactic').val()]['ma']) +
                    parseInt(mappedBenefitsMods['ma'])
                );
            }

            function updateTotalVD() {
                $('#total-VD').html(
                    {{ army.baseVD }} + 
                    parseInt($('#strategy').val()) * -1 +
                    parseInt(mappedTactics[$('#tactic').val()]['vd']) +
                        parseInt(mappedBenefitsMods['vd'])
                );
            }

            function updateTotalDamages() {
                $('#total-damages').html(
                    parseInt(mappedTactics[$('#tactic').val()]['damages']) +
                    parseInt(mappedBenefitsMods['damages'])
                );
            }

            function updateTotalMoral() {
                var moral = parseInt(mappedTactics[$('#tactic').val()]['moral']);
                if ($('#commanderInput').prop('checked')) {
                    moral += {{ army.commander.bonusMoral }};
                }
                moral += parseInt(mappedBenefitsMods['moral']);

//                if (moral < -4) {
//                    moral = -4;
//                }
//                if (moral > 4) {
//                    moral = 4;
//                }
                $('#total-Moral').html(moral);
            }

            function updateTotalSpeed() {
                $('#total-Speed').html(
                    {{ army.baseArmySpeed }} +
                    parseInt(mappedTactics[$('#tactic').val()]['speed']) +
                        parseInt(mappedBenefitsMods['speed'])
                );
            }

            function updateTotalConso() {
                $('#total-Conso').html(
                    {{ army.basePC }} +
                    parseInt(mappedTactics[$('#tactic').val()]['conso']) +
                        parseInt(mappedBenefitsMods['conso'])
                );
            }

            function initStrategy()
            {
                $('#strategy').change(function () {
                    updateTotalMA();
                    updateTotalVD();
                    snapshotCombatStats();
                });
            }

            function initTactic()
            {
                var tacticsDesc = {};
                {% for tactic in army.tactics %}
                    tacticsDesc[{{ tactic.id }}] = ('<strong>{{ tactic.name }} :</strong> {{ tactic.description }}');
                {% endfor %}
                var tactic = $('#tactic');
                $('#tactic-description').html(tacticsDesc[tactic.val()]);
                tactic.change(function () {
                    $('#tactic-description').html(tacticsDesc[$('#tactic').val()]);
                    updateTotals();
                });
            }
        });

        function updateHpBar()
        {
            var percentLife = $('#currentHP').val()/$('#maxHP').html()*100;
            var hpBar = $('#hp-bar');
            hpBar.css('width', percentLife+'%');
            if (percentLife < 10) {
                hpBar
                    .removeClass('progress-bar-success')
                    .removeClass('progress-bar-warning')
                    .addClass('progress-bar-danger');
            } else if (percentLife < 50) {
                hpBar
                    .removeClass('progress-bar-success')
                    .removeClass('progress-bar-danger')
                    .addClass('progress-bar-warning');
            } else {
                hpBar
                    .removeClass('progress-bar-danger')
                    .removeClass('progress-bar-warning')
                    .addClass('progress-bar-success');
            }
            snapshotCombatStats();
        }

        function snapshotCombatStats()
        {
            var benefits = [];
            $('[data-benefit]').each(function () {
                if ($(this).find('.benefitInput').val() == 1) {
                    benefits.push(parseInt($(this).attr('data-benefit')));
                }
            });

            $.post(
                Routing.generate('ico_mass_fight_army_combat_stats_push'),
                {
                    'armyId': {{ army.id }},
                    'combatStats': {
                        'hp': $('#currentHP').val(),
                        'strategy': $('#strategy').val(),
                        'tactic': $('#tactic').val(),
                        'benefits': benefits
                    }
                }
            );
        }
    </script>
{% endblock %}